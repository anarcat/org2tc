#!/usr/bin/env python

# A simple script that takes an org-mode file as input, and prints a timeclock
# file as output.  This can then be read directly by Ledger for fancy time
# reporting and querying.

import sys
import re
import time

def parse_org_time(s):
    return time.strptime(s, "%Y-%m-%d %a %H:%M")

events       = []
last_heading = None
data         = sys.argv[1]
regex        = sys.argv[2] if len(sys.argv) > 2 else None
fd           = open(data, "r")
headings     = [None] * 9

for line in fd:
    match = re.search("^(\*+)\s*(.+)", line)
    if match:
        depth = len(match.group(1))
        headings[depth] = match.group(2)

    depth = 0
    match = re.search("^(\*+)\s*(([A-Z]{3}[A-Z]+)(\s+\[#[ABC]\])?)?\s*(.+)", line)
    if match:
        depth = len(match.group(1))
        todo_keyword = match.group(3)
        last_heading = match.group(5)
        match = re.search("(.+?)\s+:\S+:$", last_heading)
        if match:
            last_heading = match.group(1)
        match = re.search("\[\[.*\]\]\s+(.+?)$", last_heading)
        if match:
            last_heading = match.group(1)

        headings[depth] = last_heading

        i = 0
        prefix = ""
        while i < depth:
            if prefix:
                prefix += ":" + headings[i]
            else:
                prefix = headings[i]
            i += 1

        if prefix:
            #last_heading = prefix + "  " + last_heading
            last_heading = prefix + ":" + last_heading

        if regex and not (prefix and re.search(regex, prefix)):
            last_heading = None

    if last_heading:
        match = re.search("CLOCK:\s+\[(.+?)\](--\[(.+?)\])?", line)
        if match:
            clock_in  = parse_org_time(match.group(1))
            clock_out = match.group(3) # optional
            if clock_out:
                clock_out = parse_org_time(clock_out)

            events.append((clock_in, clock_out, todo_keyword, last_heading))

fd.close()

def event_compare(x, y):
    xt = time.mktime(x[0])
    yt = time.mktime(y[0])
    if xt < yt:
        return -1
    elif xt > yt:
        return 1
    else:
        return 0

events.sort(event_compare)

for event in events:
    print "i %s %s" % (time.strftime("%Y/%m/%d %H:%M:%S", event[0]), event[3])
    if event[1]:
        if event[2] == "DONE":
            print "O",
        else:
            print "o",
        print "%s" % time.strftime("%Y/%m/%d %H:%M:%S", event[1])

# org2tc ends here
